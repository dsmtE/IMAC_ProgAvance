//-----------------------------------------------------------------------------------
//
// Paratrooper
// Copyright (C) 2007-2008  Sukender
// For more information, contact us : sukender@free.fr
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// For any use that is not compatible with the terms of the GNU 
// General Public License, please contact the authors for alternative
// licensing options.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//
//-----------------------------------------------------------------------------------

///\file
/// Hi score management (saving/loading/etc.)

//
//#include <PVLE/Util/Util.h>
////#include <boost/serialization/extended_type_info_typeid.hpp>
//#include <boost/serialization/split_member.hpp>
//#include <boost/serialization/version.hpp>
//#include <boost/filesystem/path.hpp>
//
//class HiScores {
//public:
//	HiScores() { reset(); }
//	void reset();
//
//	/// Add a new hi score (or not if it is below the latest !).
//	void add(const std::string & name, UINT score);
//	/// Same as add(Game::EDifficultyLevel, const std::string &, UINT), using the current game settings.
//	//void add(const std::string & name);
//	/// Tests if the given score should be written the the high scores list.
//	bool isHiScore(UINT score) { return score > scores[MAX_SCORES-1]; }
//	/// Same as isHiScore(Game::EDifficultyLevel, UINT), using the current game settings.
//	//void isHiScore(const std::string & name);
//
//	/// Merges a HiScores list into this one.
//	void merge(const HiScores & v);
//
//	void save(const boost::filesystem::path & path) const;
//	void load(const boost::filesystem::path & path);
//
//	static const char * getDefaultName() { return "Player"; }
//
//	static const UINT MAX_SCORES = 10;
//	const std::string * getNames() const { return names; }
//	const UINT * getScores() const { return scores; }
//
//	/// Different versions of the high scores archive.
//	enum EHiScoresArchiveVersions {
//		SIMPLE,											///< Base version
//
//		MAX_ARCHIVE_VERSION,
//		CURRENT_ARCHIVE_VERSION = MAX_ARCHIVE_VERSION-1	///< Version of the archive generated by the serialization methods. Increment it when scoring and/or gameplay changes.
//	};
//
//protected:
//	std::string names[MAX_SCORES];
//	UINT scores[MAX_SCORES];
//
//private:
//	friend class boost::serialization::access;
//
//	template<class Archive>
//	void serialize(Archive & ar, const unsigned int version) {
//		if (version == SIMPLE) {
//			ar & names;
//			ar & scores;
//			return;
//		}
//		THROW_TRACED_EXCEPTION("Unexpected hi-scores archive version.");
//	}
//};
//
//
//BOOST_CLASS_VERSION(HiScores, HiScores::CURRENT_ARCHIVE_VERSION);
////namespace boost { 
////namespace serialization {
////template<>
////struct version<HiScores> {
////    BOOST_STATIC_CONSTANT(unsigned int, value = HiScores::CURRENT_ARCHIVE_VERSION);
////};
////} // namespace serialization
////} // namespace boost
